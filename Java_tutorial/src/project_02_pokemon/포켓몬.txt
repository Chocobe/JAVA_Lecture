산책하며 포켓몬을 많이 잡았습니다. HashMap과 ArrayList를 활용하여 포켓몬들을 담을 가방을 만들어 봅시다!

PokeBag 클래스
(1) private final 자료형 pokemons = new 자료형();

HashMap 강의에서 만들었던 PokeDex에서는 한 마리의 마릴 인스턴스만 담을 수 있었죠? PokeBag에서는 마릴이라는 key 하나에 여러 마리의 마릴 인스턴스를 담을 수 있습니다.

이 상황에 적합한 자료형을 생각해 봅시다.

(2) public ArrayList<Pokemon> getPokemons(String name)

name 이름을 갖고 있는 포켓몬을 모두 가져오는 메소드입니다.

(3) public void add(Pokemon pokemon)

과정 (1)에서 구현한 pokemons에 Pokemon을 넣는 메소드입니다.

(4) public Pokemon getStrongest(String name)

name 이름의 포켓몬 중 가장 강한(cp가 가장 큰) 포켓몬을 가져오는 메소드입니다.

(5) public Pokemon getStrongest()

내가 가진 모든 포켓몬 중 가장 강한 포켓몬을 가져오는 메소드입니다. 내부적으로 (4)번 메소드를 호출하도록 구현해보세요.



힌트
HashMap을 탐색하는 방법

HashMap<MyKey, MyElement> hashMap = new HashMap<>();
...
for (MyKey key : hashMap.keySet()) {
    MyElement element = hashMap.get(key);
    ...
}


HashMap에 키가 있는지 검사
if (hashMap.containsKey(myKey)) {
    ...
}

힌트 1 사전

PokeBag은 포캣몬들을 담을 수 있는 가방입니다. 우리가 잡은 포캣몬들을 보관하는 장소라고 생각하면 편합니다.

PokeBag에 우리가 추가하려는 포캣몬의 종류가 있으면, 이들이 저장되어있는 ArrayList에 추가해줄 수 있습니다.

만약 우리가 추가하려는 포캣몬의 종류가 없으면, 해당 포캣몬의 종류와 이들을 담을 ArrayList를 생성해준 후, 추가해줄 수 있습니다.

즉 PokeBag 클래스에는 포캣몬의 종류(String name)을 key로, 이들을 담을 배열(ArrayKist<Pokemon>)을 value로 갖고 있는 HashMap 자료형을 쓰는 것이 가장 적합합니다.




private final HashMap<String, ArrayList<Pokemon>> pokemons = new HashMap<>();




힌트 2 add 메소드

다음은 add 메소드에 대한 힌트입니다. HashMap의 특성, ArrayList의 특성을 잘 활용하여 코드를 작성하세요!


public void add(Pokemon pokemon) {
    // 추가할 새 포켓몬의 종류(이름)을 저장.
    String name = pokemon.name;

    // 해당하는 ArrayList가 없으면 생성.
    // 힌트: getPokemons 메소드를 사용. 리턴값이 null이면 새롭게 key-value값을 추가.
    // 코드를 작성하세요. 

    // 새 포캣몬의 종류에 해당하는 ArrayList에 포캣몬을 추가.
    // 코드를 작성하세요.
}


힌트3

PokeBag 클래스에는 getStrongest 메소드가 오버로딩되어있습니다.

하나는 public Pokemon getStrongest(String name)처럼 name이라는 파라미터를 받아, 해당 포캣몬의 종류 중 가장 cp가 높은 포캣몬을 리턴해주는 메소드입니다.

또 다른 하나는 public Pokemon getStrongest()처럼 파라미터 없이, 모든 저장된 포캣몬들 중 가장 cp가 높은 포캣몬을 리턴해주는 메소드입니다.



public Pokemon getStrongest(String name) {
    // name 이름의 포켓몬 목록.
    ArrayList<Pokemon> pokemonList = getPokemons(name);

    // name 이름의 포캣몬 목록이 비어있으면, null 리턴.
    if (pokemonList == null) {
        return null;
    }

    // return할 포켓몬(가장 센 포켓몬)을 담을 변수.
    Pokemon strongest = null;

    // 포캣몬 리스트 안에 있는, 모든 포캣몬의 cp를 비교.
    // strongest를 가장 센 포캣몬으로 교체
    // 코드를 작성하세요.
}

public Pokemon getStrongest() {
    // return할 포켓몬(가장 센 포켓몬)을 담을 변수.
    Pokemon strongest = null;

    // HashMap 전체를 탐색. (keySet을 통해 얻은 key로 탐색)
    // pokemons.keySet()에 대해, key에 해당하는 가장 센 포캣몬을 가져와서, 해당 포캣몬들의 cp를 비교.
    // strongest를 가장 센 포캣몬으로 교체
    // 힌트: 이전에 정의한 getStrongest(key) 메소드를 활용.
    // 코드를 작성하세요.
}
















